const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/demo.D6UNlUet.js","assets/chunks/cesium-view.vue_vue_type_script_setup_true_lang.BkNrhFe5.js","assets/chunks/framework.fHSmVqmP.js","assets/chunks/theme.wOsYQf5M.js"])))=>i.map(i=>d[i]);
import{d as i,c as o,ae as n,G as e,w as d,B as l,o as s,k as h,U as m,V as c}from"./chunks/framework.fHSmVqmP.js";import{_ as u,p as _}from"./chunks/promise-loding.vue_vue_type_script_setup_true_lang.DLeIvyOA.js";const P=JSON.parse('{"title":"使用自定义 Primitive 构造立方体","description":"","frontmatter":{},"headers":[],"relativePath":"study/CesiumAdvanced/4-自定义Primitive/index.md","filePath":"study/CesiumAdvanced/4-自定义Primitive/index.md","lastUpdated":1733282875000}'),b={name:"study/CesiumAdvanced/4-自定义Primitive/index.md"},v=i({...b,setup(p){const r=m({loader:()=>c(()=>import("./chunks/demo.D6UNlUet.js"),__vite__mapDeps([0,1,2,3])),loadingComponent:u,errorComponent:_});return(f,a)=>{const t=l("ClientOnly");return s(),o("div",null,[a[0]||(a[0]=n('<h1 id="使用自定义-primitive-构造立方体" tabindex="-1">使用自定义 Primitive 构造立方体 <a class="header-anchor" href="#使用自定义-primitive-构造立方体" aria-label="Permalink to &quot;使用自定义 Primitive 构造立方体&quot;">​</a></h1><h2 id="_0-drawcommand" tabindex="-1">0. drawCommand <a class="header-anchor" href="#_0-drawcommand" aria-label="Permalink to &quot;0. drawCommand&quot;">​</a></h2><p>自定义 Primitive 主要是使用 drawCommand</p><h2 id="_1-定义位置数组" tabindex="-1">1. 定义位置数组 <a class="header-anchor" href="#_1-定义位置数组" aria-label="Permalink to &quot;1. 定义位置数组&quot;">​</a></h2><h2 id="_2-定义法向数组" tabindex="-1">2. 定义法向数组 <a class="header-anchor" href="#_2-定义法向数组" aria-label="Permalink to &quot;2. 定义法向数组&quot;">​</a></h2><h2 id="_3-定义纹理数组" tabindex="-1">3. 定义纹理数组 <a class="header-anchor" href="#_3-定义纹理数组" aria-label="Permalink to &quot;3. 定义纹理数组&quot;">​</a></h2><h2 id="_4-定义索引" tabindex="-1">4. 定义索引 <a class="header-anchor" href="#_4-定义索引" aria-label="Permalink to &quot;4. 定义索引&quot;">​</a></h2><h2 id="_5-定义纹理" tabindex="-1">5. 定义纹理 <a class="header-anchor" href="#_5-定义纹理" aria-label="Permalink to &quot;5. 定义纹理&quot;">​</a></h2><h2 id="_6-定义attributelocations" tabindex="-1">6. 定义attributeLocations <a class="header-anchor" href="#_6-定义attributelocations" aria-label="Permalink to &quot;6. 定义attributeLocations&quot;">​</a></h2><h2 id="_7-定义shader" tabindex="-1">7. 定义shader <a class="header-anchor" href="#_7-定义shader" aria-label="Permalink to &quot;7. 定义shader&quot;">​</a></h2><h2 id="_8-创建vertexarray" tabindex="-1">8. 创建vertexArray <a class="header-anchor" href="#_8-创建vertexarray" aria-label="Permalink to &quot;8. 创建vertexArray&quot;">​</a></h2><p>VertexArray 用于将 Geometry 对象中的顶点数据上传到 GPU ;</p><p>包含 attributeLocations：属性位置映射，用于指定顶点属性在着色器中的位置。 和 vertexBuffers ： 顶点缓冲区数组，每个缓冲区对应一个顶点属性（如位置、法线、纹理坐标等）</p><h2 id="_9-创建command" tabindex="-1">9. 创建command <a class="header-anchor" href="#_9-创建command" aria-label="Permalink to &quot;9. 创建command&quot;">​</a></h2><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2>',15)),e(t,null,{default:d(()=>[e(h(r))]),_:1})])}}});export{P as __pageData,v as default};
